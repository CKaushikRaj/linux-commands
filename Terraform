What is Terraform?
A):- Terraform is an open source Infrastructure as a code(IAAS) toolwhich enables the management of wide range of resources such as servers , networks and storage across multiple cloud providers like Azure , AWS , GCP as well as other providers.
Terraform automates the entire infrastructure lifecycle including creation, modification and deletion of resources.
We can define the infrastructure by writing the code.
Terraform is described as Cloud Agnostic(applications running on multiple cloud providers without being tied to single provider).
Terraform doesn't reqiure any key-pair values.
It's completely free of cost

What is Terraform resource block and lifecycle of terraform?
A Terraform resource block defines a piece of infrastructure with the given settings. When the resource block is defined in code, the resource object does not actually exist until terraform apply is executed.
The Terraform lifecycle refers to the process Terraform uses to manage infrastructure resources through three core phases: create, update, and destroy. It compares your current configuration to the real infrastructure state, then plans and applies changes to align them.
Controlling the flow of Terraform operations is possible using the lifecycle meta-argument.
           (i)create_before_destroy
           (ii)prevent_destroy
           (iii)ignore_changes
           (iv)replace_triggered_by
(i) create_before_destroy:- When Terraform determines it needs to destroy an object and recreate it, the normal behavior will create the new object after the existing one is destroyed. 
Using this attribute will create the new object first and then destroy the old one. 
This can help reduce downtime.
    lifecycle {
      create_before_destroy = true
     } 
(ii)prevent_destroy:- This lifecycle option prevents Terraform from accidentally removing critical resources. This is useful to avoid downtime when a change would result in the destruction and recreation of resource.
This block should be used only when necessary as it will make certain configuration changes impossible.
    lifecycle {
       prevent_destroy = true
       }
(iii)ignore_changes:- The Terraform ignore_changes lifecycle option can be useful when attributes of a resource are updated outside of Terraform.
             lifecycle {
                  ignore_changes = [
                       tags["department"]
                         ]
              }
(iv)replace_triggered_by:-astly, this option forces the replacement of the resource when the specified resource is changed. 
This may be useful when the resource references another resource and needs to be replaced when this happens, for example, when a resource id changes.
